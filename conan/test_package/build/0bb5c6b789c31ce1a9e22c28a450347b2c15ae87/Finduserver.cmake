

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAMES ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAMES ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                string(REGEX REPLACE "[^A-Za-z0-9.+_-]" "_" _LIBRARY_NAME ${_LIBRARY_NAME})
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated Finduserver.cmake")
# Global approach
set(userver_FOUND 1)
set(userver_VERSION "1.0.0")

find_package_handle_standard_args(userver REQUIRED_VARS
                                  userver_VERSION VERSION_VAR userver_VERSION)
mark_as_advanced(userver_FOUND userver_VERSION)


set(userver_INCLUDE_DIRS "/root/.conan/data/userver/1.0.0/_/_/package/3dbae2e5af315b89cf2395933e40b73df1ea6d23/include")
set(userver_INCLUDE_DIR "/root/.conan/data/userver/1.0.0/_/_/package/3dbae2e5af315b89cf2395933e40b73df1ea6d23/include")
set(userver_INCLUDES "/root/.conan/data/userver/1.0.0/_/_/package/3dbae2e5af315b89cf2395933e40b73df1ea6d23/include")
set(userver_RES_DIRS )
set(userver_DEFINITIONS "-DUSERVER_NAMESPACE=userver"
			"-DUSERVER_NAMESPACE_BEGIN="
			"-DUSERVER_NAMESPACE_END=")
set(userver_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)
set(userver_COMPILE_DEFINITIONS "USERVER_NAMESPACE=userver"
			"USERVER_NAMESPACE_BEGIN="
			"USERVER_NAMESPACE_END=")
set(userver_COMPILE_OPTIONS_LIST "" "")
set(userver_COMPILE_OPTIONS_C "")
set(userver_COMPILE_OPTIONS_CXX "")
set(userver_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(userver_LIBRARIES "") # Will be filled later
set(userver_LIBS "") # Same as userver_LIBRARIES
set(userver_SYSTEM_LIBS )
set(userver_FRAMEWORK_DIRS )
set(userver_FRAMEWORKS )
set(userver_FRAMEWORKS_FOUND "") # Will be filled later
set(userver_BUILD_MODULES_PATHS )

conan_find_apple_frameworks(userver_FRAMEWORKS_FOUND "${userver_FRAMEWORKS}" "${userver_FRAMEWORK_DIRS}")

mark_as_advanced(userver_INCLUDE_DIRS
                 userver_INCLUDE_DIR
                 userver_INCLUDES
                 userver_DEFINITIONS
                 userver_LINKER_FLAGS_LIST
                 userver_COMPILE_DEFINITIONS
                 userver_COMPILE_OPTIONS_LIST
                 userver_LIBRARIES
                 userver_LIBS
                 userver_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to userver_LIBS and userver_LIBRARY_LIST
set(userver_LIBRARY_LIST userver-core)
set(userver_LIB_DIRS "/root/.conan/data/userver/1.0.0/_/_/package/3dbae2e5af315b89cf2395933e40b73df1ea6d23/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_userver_DEPENDENCIES "${userver_FRAMEWORKS_FOUND} ${userver_SYSTEM_LIBS} Boost::Boost;libev::libev;spdlog::spdlog;fmt::fmt;c-ares::c-ares;CURL::CURL;cryptopp::cryptopp;yaml-cpp::yaml-cpp;cctz::cctz;http_parser::http_parser;jemalloc::jemalloc")

conan_package_library_targets("${userver_LIBRARY_LIST}"  # libraries
                              "${userver_LIB_DIRS}"      # package_libdir
                              "${_userver_DEPENDENCIES}"  # deps
                              userver_LIBRARIES            # out_libraries
                              userver_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "userver")                                      # package_name

set(userver_LIBS ${userver_LIBRARIES})

foreach(_FRAMEWORK ${userver_FRAMEWORKS_FOUND})
    list(APPEND userver_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND userver_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${userver_SYSTEM_LIBS})
    list(APPEND userver_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND userver_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(userver_LIBRARIES_TARGETS "${userver_LIBRARIES_TARGETS};Boost::Boost;libev::libev;spdlog::spdlog;fmt::fmt;c-ares::c-ares;CURL::CURL;cryptopp::cryptopp;yaml-cpp::yaml-cpp;cctz::cctz;http_parser::http_parser;jemalloc::jemalloc")
set(userver_LIBRARIES "${userver_LIBRARIES};Boost::Boost;libev::libev;spdlog::spdlog;fmt::fmt;c-ares::c-ares;CURL::CURL;cryptopp::cryptopp;yaml-cpp::yaml-cpp;cctz::cctz;http_parser::http_parser;jemalloc::jemalloc")

set(CMAKE_MODULE_PATH "/root/.conan/data/userver/1.0.0/_/_/package/3dbae2e5af315b89cf2395933e40b73df1ea6d23/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/root/.conan/data/userver/1.0.0/_/_/package/3dbae2e5af315b89cf2395933e40b73df1ea6d23/" ${CMAKE_PREFIX_PATH})

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET userver::userver)
        add_library(userver::userver INTERFACE IMPORTED)
        if(userver_INCLUDE_DIRS)
            set_target_properties(userver::userver PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                                  "${userver_INCLUDE_DIRS}")
        endif()
        set_property(TARGET userver::userver PROPERTY INTERFACE_LINK_LIBRARIES
                     "${userver_LIBRARIES_TARGETS};${userver_LINKER_FLAGS_LIST}")
        set_property(TARGET userver::userver PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     ${userver_COMPILE_DEFINITIONS})
        set_property(TARGET userver::userver PROPERTY INTERFACE_COMPILE_OPTIONS
                     "${userver_COMPILE_OPTIONS_LIST}")
        
        # Library dependencies
        include(CMakeFindDependencyMacro)

        if(NOT Boost_FOUND)
            find_dependency(Boost REQUIRED)
        else()
            message(STATUS "Dependency Boost already found")
        endif()


        if(NOT libev_FOUND)
            find_dependency(libev REQUIRED)
        else()
            message(STATUS "Dependency libev already found")
        endif()


        if(NOT spdlog_FOUND)
            find_dependency(spdlog REQUIRED)
        else()
            message(STATUS "Dependency spdlog already found")
        endif()


        if(NOT fmt_FOUND)
            find_dependency(fmt REQUIRED)
        else()
            message(STATUS "Dependency fmt already found")
        endif()


        if(NOT c-ares_FOUND)
            find_dependency(c-ares REQUIRED)
        else()
            message(STATUS "Dependency c-ares already found")
        endif()


        if(NOT CURL_FOUND)
            find_dependency(CURL REQUIRED)
        else()
            message(STATUS "Dependency CURL already found")
        endif()


        if(NOT cryptopp_FOUND)
            find_dependency(cryptopp REQUIRED)
        else()
            message(STATUS "Dependency cryptopp already found")
        endif()


        if(NOT yaml-cpp_FOUND)
            find_dependency(yaml-cpp REQUIRED)
        else()
            message(STATUS "Dependency yaml-cpp already found")
        endif()


        if(NOT cctz_FOUND)
            find_dependency(cctz REQUIRED)
        else()
            message(STATUS "Dependency cctz already found")
        endif()


        if(NOT http_parser_FOUND)
            find_dependency(http_parser REQUIRED)
        else()
            message(STATUS "Dependency http_parser already found")
        endif()


        if(NOT jemalloc_FOUND)
            find_dependency(jemalloc REQUIRED)
        else()
            message(STATUS "Dependency jemalloc already found")
        endif()

    endif()
endif()

foreach(_BUILD_MODULE_PATH ${userver_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
